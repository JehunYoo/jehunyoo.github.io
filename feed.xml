<feed xmlns="http://www.w3.org/2005/Atom"> <id>https://jehunyoo.github.io/</id><title>jehunyoo.github.io</title><subtitle>Jehun Yoo's tech blog</subtitle> <updated>2024-01-20T19:18:51+09:00</updated> <author> <name>Jehun Yoo</name> <uri>https://jehunyoo.github.io/</uri> </author><link rel="self" type="application/atom+xml" href="https://jehunyoo.github.io/feed.xml"/><link rel="alternate" type="text/html" hreflang="en" href="https://jehunyoo.github.io/"/> <generator uri="https://jekyllrb.com/" version="4.3.3">Jekyll</generator> <rights> © 2024 Jehun Yoo </rights> <icon>/assets/img/favicons/favicon.ico</icon> <logo>/assets/img/favicons/favicon-96x96.png</logo> <entry><title>Docker 첫 사용기 - MySQL 사용하기</title><link href="https://jehunyoo.github.io/posts/docker-mysql/" rel="alternate" type="text/html" title="Docker 첫 사용기 - MySQL 사용하기" /><published>2024-01-20T19:00:00+09:00</published> <updated>2024-01-20T19:18:21+09:00</updated> <id>https://jehunyoo.github.io/posts/docker-mysql/</id> <content src="https://jehunyoo.github.io/posts/docker-mysql/" /> <author> <name>Jehun Yoo</name> </author> <category term="Docker" /> <summary> Introduction 최근에 MySQL을 프로젝트에서 사용하기로 결정하기도 했고, MySQL에 대해 깊이 있게 공부하기 위해서 맥북에 설치가 필요했다. 그냥 로컬에 설치하는건 어렵지 않지만 MariaDB도 설치해야 하는 경우에 애를 먹었던 기억이 있어서 다른 방법으로 설치를 하고 싶었다. (정확하지는 않지만) 두 데이터베이스가 설치 경로를 공유하는 문제였던 것으로 기억한다. 그래서 생각해낸 방법이 Docker이다. Docker를 사용하면 심지어 두 데이터베이스를 필요에 따라 동시에 사용할 수도 있을 것이다. Docker에 대해서 간단하게 Docker image와 container에 대해서 간단하게 설명해보겠다. image는 어떤 애플리케이션을 위한 환경을 모두 담아둔 것이다. cont... </summary> </entry> <entry><title>[Waffle] 스프링 프로젝트 구조 설계하기</title><link href="https://jehunyoo.github.io/posts/waffle-spring-project-architecture/" rel="alternate" type="text/html" title="[Waffle] 스프링 프로젝트 구조 설계하기" /><published>2023-10-23T23:02:00+09:00</published> <updated>2023-10-23T23:06:14+09:00</updated> <id>https://jehunyoo.github.io/posts/waffle-spring-project-architecture/</id> <content src="https://jehunyoo.github.io/posts/waffle-spring-project-architecture/" /> <author> <name>Jehun Yoo</name> </author> <category term="Waffle" /> <summary> 현재 상황 구현해야 하는 것 Member, Waffle, Comment CRUD Auth (회원가입, 로그인, 로그아웃) DB 테이블 설계 Member, Waffle, Comment + 기타 테이블 패키지 구조 정하기 검색해보니 패키지 구조에는 크게 2가지 경우가 있었다. 계층형 도메인형 도메인형 구조는 도메인 별로 패키지를 분리한다. 독립적인 코드를 작성하는 것에 유리하다고 생각해서 도메인형 패키지 구조를 사용하기로 했다. 프로젝트 구조 설계하기 스프링 프레임워크를 사용하는 만큼 객체 지향 프로그래밍에 맞게 설계를 하고 싶었다. 특히 객체들이 하나의 책임만을 갖고 (SRP), 구체화보다는 추상화에 의존하면서 (DIP), 확장에는 열려있으나 변경에는 닫혀있는... </summary> </entry> <entry><title>Java Interface - 객체 지향 프로그래밍의 관점에서</title><link href="https://jehunyoo.github.io/posts/java-interface-oop/" rel="alternate" type="text/html" title="Java Interface - 객체 지향 프로그래밍의 관점에서" /><published>2023-10-22T23:25:00+09:00</published> <updated>2023-10-23T21:19:14+09:00</updated> <id>https://jehunyoo.github.io/posts/java-interface-oop/</id> <content src="https://jehunyoo.github.io/posts/java-interface-oop/" /> <author> <name>Jehun Yoo</name> </author> <category term="Java" /> <summary> 객체들의 소통 방식 객체 지향 프로그래밍에서 객체들은 어떻게 소통할까? 객체들은 각자 주어진 역할이 있고 그 역할을 수행하기 위한 책임을 갖는다. 객체들이 역할을 성실히 수행하면 하나의 커다란 애플리케이션을 완성할 수 있다. 객체들이 역할을 성실하게 수행하기 위해서는 자신들만의 명확한 역할과 책임을 가져야 한다. 따라서 다른 역할과 책임을 갖는 객체에 의존적이지 않아야 한다. 또한 객체들은 서로가 필요할 때 서로에게 요구사항을 전달할 수 있어야 한다. 요구사항을 전달하는 것은 여러 단어로 말할 수 있을 것 같다. 요청 소통 협력 어떻게 서로 소통하는지에 대한 생각은 잠시 미뤄두고, 무엇을 소통할 수 있는지 생각해보자. 인터페이스란? 위키백과에는 인터페이스를 다음과 같이 설명한다.... </summary> </entry> <entry><title>[Waffle] 댓글 조회 REST API 설계하기</title><link href="https://jehunyoo.github.io/posts/waffle-define-comment-rest-api/" rel="alternate" type="text/html" title="[Waffle] 댓글 조회 REST API 설계하기" /><published>2023-10-16T23:10:00+09:00</published> <updated>2023-10-16T23:10:00+09:00</updated> <id>https://jehunyoo.github.io/posts/waffle-define-comment-rest-api/</id> <content src="https://jehunyoo.github.io/posts/waffle-define-comment-rest-api/" /> <author> <name>Jehun Yoo</name> </author> <category term="Waffle" /> <summary> 뭔가 이상한데? 만들었던 API 명세에는 단일 댓글 조회를 이렇게 해놨다. GET /waffles/{waffleId}/comments/{commentId} 여기서 waffleId, commentId가 정확히 어떤 의미인지 혼동이 왔다. 저 URI가 의미가 있으려면 계층 구조를 살려서 다음과 같이 사용되야 한다고 생각했다. /waffles/10/comments/2 (10번째 waffle의 2번째 댓글) path variable 자리에 몇 번째인지 의미를 부여했다. 이렇게 하면 각 waffle에 대한 n번째 댓글을 요청할 수 있으므로 요청을 보낼 때도 의미가 자연스러워 보였다. 구현하기 /waffles/10/comments/2라는 요청을 받았다고 가정하자. 어떻게 구현할 것인가? 현재 DB의... </summary> </entry> <entry><title>C CheatSheet</title><link href="https://jehunyoo.github.io/posts/c-cheatsheet/" rel="alternate" type="text/html" title="C CheatSheet" /><published>2020-07-29T00:00:00+09:00</published> <updated>2020-07-29T00:00:00+09:00</updated> <id>https://jehunyoo.github.io/posts/c-cheatsheet/</id> <content src="https://jehunyoo.github.io/posts/c-cheatsheet/" /> <author> <name>Jehun Yoo</name> </author> <category term="C" /> <summary> 1D Array #1 int main(void) { int arr[2]; arr[0]=0, arr[1]=1, arr[2]=2; } → arr[2]=2; 컴파일러는 배열 접근에 있어서 유효성 검사를 진행하지 않는다. ∴ compile error 발생 X 할당되지 않은 메모리 공간을 침범할 수 있으므로 주의하자. #2 Length of Array len = sizeof(arr) / sizeof(/* type of element */); 함수 내부에서는 배열의 길이를 구할 수 없다. 함수 내부에서 argument로 받은 배열의 sizeof연산 결과는 64bit 시스템에서는 8byte, 32bit 시스템에서는 4byte이다. 즉, pointer의 크기와 같다. #3 Str... </summary> </entry> </feed>
